{# myspotify.html.twig #}

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MySpotify</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <style>
body {
    display: flex;
    flex-direction: column;
    height: 100vh;
    margin: 0;
    background: #000;
    color: white;
    font-family: Arial, sans-serif;
    transition: background 0.5s ease-in-out;
}

.sidebar {
    width: 250px;
    height: 100vh;
    background: #121212;
    color: white;
    padding: 20px;
    position: fixed;
    top: 0;
    left: 0;
}
.sidebar-title {
    color: white;
    text-decoration: none;
    font-size: 24px;
    font-weight: bold;
    text-shadow: 0 0 10px white, 0 0 20px white;
}

.content {
    margin-left: 250px;
    flex: 1;
    padding: 20px;
    overflow-y: auto;
    margin-bottom: 90px;
}

.header, .footer {
    background: #121212;
    color: white;
    padding: 10px 20px;
    display: flex;
    align-items: center;
}

.header {
    background: #121212;
    color: white;
    padding: 10px 20px;
    display: flex;
    align-items: center;
    justify-content: space-between; /* Distribuye a los extremos */
    position: fixed;
    top: 0;
    left: 250px;
    width: calc(100% - 250px);
    z-index: 1000;
}

/* Contenedor izquierdo (buscador) */
.header-left {
    flex: 1; /* Ocupa el espacio disponible */
}

/* Contenedor derecho (usuario y sesi√≥n) */
.header-right {
    display: flex;
    align-items: center;
    gap: 15px; /* Espaciado entre elementos */
}

.footer {
    position: fixed;
    bottom: 0;
    width: 100%;
    justify-content: center;
    z-index: 1000;
}

.search-bar {
    width: 100%;
    max-width: 300px; /* Tama√±o fijo */
    background: white;
    color: white;
    border: 1px solid #0ff; /* Efecto ne√≥n */
    padding: 8px;
    border-radius: 5px;
}

/* Estilos para el nombre de usuario */
.user-name {
    margin: 0;
    font-weight: bold;
}

/* Botones de sesi√≥n */
.profile-icon {
    text-decoration: none;
    color: white;
    font-weight: bold;
    padding: 8px 12px;
    border-radius: 5px;
    transition: 0.3s;
}

/* Bot√≥n de cerrar sesi√≥n */
.logout-btn {
    background: red;
    color: white;
}

.logout-btn:hover {
    background: darkred;
}

/* Bot√≥n de login */
.login-btn {
    background: #0ff;
    color: black;
}

.login-btn:hover {
    background: #08f;
    color: white;
}

.search-bar:focus {
    outline: none;
    box-shadow: 0px 0px 10px #6287f8;
}

/* Estilo de las canciones */
.songs-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
    gap: 20px;
    margin-top: 60px;
}

.song-card {
    cursor: pointer;
    text-align: center;
    padding: 10px;
    border-radius: 10px;
    background: #222;
    transition: 0.3s ease-in-out;
}

.song-card img {
    width: 100%;
    border-radius: 8px;
    transition: transform 0.3s ease-in-out;
}

/* Efecto al pasar el mouse */
.song-card:hover {
    background: #6287f8;
    box-shadow: 0px 0px 15px #6287f8;
    transform: scale(1.05);
}

/* Efecto cuando la canci√≥n est√° en reproducci√≥n */
.song-card.playing {
    background: #ff6e27;
    box-shadow: 0px 0px 20px #ff6e27;
}

/* Estilos del reproductor */
.player {
    position: fixed;
    bottom: 0;
    left: 250px;
    width: calc(100% - 250px);
    background: #282828;
    color: white;
    padding: 10px;
    display: none;
    align-items: center;
    justify-content: space-between;
    z-index: 1050;
}

.player-controls {
    display: flex;
    align-items: center;
    gap: 15px;
}

.progress-bar {
    width: 60%;
    height: 5px;
    background: #555;
    border-radius: 5px;
    position: relative;
    cursor: pointer;
}

.progress {
    height: 5px;
    background: #1db954;
    width: 0%;
    position: absolute;
    top: 0;
    left: 0;
}

.volume-control {
    width: 100px;
}

.close-btn {
    cursor: pointer;
    font-size: 20px;
    margin-left: 10px;
    color: white;
    transition: 0.3s;
}

.close-btn:hover {
    color: black;
}

.play-btn {
    background: none;
    border: none;
    color: white;
    font-size: 24px;
    cursor: pointer;
    transition: 0.3s;
}

.play-btn:hover {
    color: #1db954;
}

.neon-btn {
    font-size: 12px;
    font-weight: bold;
    color: #fff;
    background: none;
    border: 2px solid #6287f8;
    padding: 12px 24px;
    border-radius: 8px;
    text-transform: uppercase;
    cursor: pointer;
    position: relative;
    outline: none;
}

.neon-btn:hover {
    background: #6287f8;
    text-shadow: 0 0 5px #000;
}

.neon-btn:active {
    background: #ff6e27;
    text-shadow: 0 0 5px #000;
    border: 2px solid #ff6e27;
}

.neon-link {
    display: block;
    padding: 10px;
    font-size: 18px;
    color: #fff;
    text-decoration: none;
    background: transparent;
    border: 2px solid transparent;
    border-radius: 5px;
    transition: 0.3s;
    text-shadow: 0 0 8px #0ff;
}





    </style>
</head>
<body>
    <div class="sidebar">
    <h2><a href="./music" class="sidebar-title">MySpotify</a></h2>
    <nav>
        <ul class="nav flex-column">
            <li class="nav-item">
                <a href="#" onclick="showSection('songs')" class="nav-link neon-link">üéµ Canciones</a>
            </li>
            <li class="nav-item">
                <a href="#" onclick="showSection('playlists')" class="nav-link neon-link">üìÇ Playlists</a>
            </li>
            {% if is_granted('ROLE_USER') and not is_granted('ROLE_ADMIN') %}
             <li class="nav-item">
                <a href="#" onclick="showSection('misPlaylists')" class="nav-link neon-link">üéß Mis Playlists</a>
            </li>
            {% endif %}
            {% if is_granted('ROLE_USER') %}
                <li class="nav-item">
                    <button class="neon-btn" onclick="createPlaylist()">‚ûï Crear Playlist</button>
                </li>
            {% endif %}
        </ul>
    </nav>
</div>



<div class="header">
    <div class="header-left">
        <input type="text" class="form-control search-bar" placeholder="Buscar canciones y playlists..." onkeyup="filterContent()">
    </div>
    <div class="header-right">
        {% if (is_granted('ROLE_USER')) or (is_granted('ROLE_ADMIN')) or (is_granted('ROLE_MANAGER')) %}
            <p class="user-name">Hola, {{ app.user.nombre }}</p>
            <a href="{{ path('app_logout') }}" class="profile-icon logout-btn">Cerrar sesi√≥n</a>
        {% endif %}
        <a href="{{ path('app_login') }}" class="profile-icon login-btn">üë§</a>
    </div>
</div>


    <div class="content">
        {% if (is_granted('ROLE_USER')) or (is_granted('ROLE_ADMIN')) or (is_granted('ROLE_MANAGER')) %}
        <br><br><br>
            {% if is_granted('ROLE_ADMIN') %}
                <a href="{{ path('admin') }}" class="neon-btn">Dashboard</a>
            {% endif %}

            {% if is_granted('ROLE_MANAGER') %}
                <a href="{{ path('estadisticas_dashboard') }}" class="profile-icon">Datos de explotacion</a>
            {% endif %}
        {% endif %}
        <br>
        <br>
        <h2 id="song-title">Canciones</h2>
        <div class="songs-grid" id="songs-section">
            {% for song in songs %}
                <div class="song-card" onclick="playSong('{{ song.file }}', '{{ song.name }}', this)">
                    <img src="{{ song.image }}" alt="{{ song.name }}">
                    <p class="song-title">{{ song.name }}</p>
                </div>
            {% endfor %}
        </div>
        <br>
        <br>
            <h2 id="playlist-title">Playlist</h2>
            <div class="songs-grid" id="playlist-section">
                {% for playlist in playlistGlobal %}
                    <div class="song-card" onclick="showPlaylist('{{ playlist.id }}')">
                        <img src="{{ playlist.image }}" alt="{{ playlist.name }}">
                        <p class="playlist-title">{{ playlist.name }}</p>
                    </div>
                {% endfor %}
            </div>
        <br>
        <br>
        {% if (is_granted('ROLE_USER')) %}
            <h2 id="misPlaylist-title">Mis Playlist</h2>
            <div class="songs-grid" id="misPlaylist-section">
                {% for playlist in playlists %}
                    <div class="song-card" onclick="showPlaylist('{{ playlist.id }}')">
                        <img src="{{ playlist.image }}" alt="{{ playlist.name }}">
                        <p class="playlist-title">{{ playlist.name }}</p>
                    </div>
                {% endfor %}
            </div>
        {% endif %}

    <div class="player" id="player">
        <span class="close-btn" onclick="closePlayer()">‚úñ</span>
        <p id="playing-song">Reproduciendo: Ninguna</p>
        <div class="progress-bar" onclick="seek(event)">
            <div class="progress" id="progress"></div>
        </div>
        <div class="player-controls">
            <button class="play-btn" onclick="pausePlay()">‚ñ∂Ô∏è</button>
            <input type="range" class="volume-control" min="0" max="1" step="0.01" onchange="changeVolume(event)">
        </div>
        <audio id="audioPlayer" ontimeupdate="updateProgress()">
            <source id="audioSource" src="" type="audio/mpeg">
            Tu navegador no soporta el elemento de audio.
        </audio>
    </div>

    

    <script>
    function filterContent() {
            let input = document.querySelector('.search-bar').value.toLowerCase();
            document.querySelectorAll('.song-card').forEach(card => {
                let title = card.querySelector('p').textContent.toLowerCase();
                card.style.display = title.includes(input) ? 'block' : 'none';
            });
        }

        function createPlaylist() {
            let name = prompt('Introduce el nombre de la playlist:');
            if (name) {
                fetch('/playlist/new', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ name: name })
                }).then(() => location.reload());
            }
        }

function showSection(section) {
    document.getElementById('songs-section').hidden = true;
    document.getElementById('song-title').hidden = true;

    document.getElementById('playlist-section').hidden = true;
    document.getElementById('playlist-title').hidden = true;

    if(document.getElementById('misPlaylist-section')){
        document.getElementById('misPlaylist-section').hidden = true;
        document.getElementById('misPlaylist-title').hidden = true;
    }

    if (section === 'songs') {
        document.getElementById('songs-section').hidden = false;
        document.getElementById('song-title').hidden = false;
    }else if (section === 'playlists') {
        document.getElementById('playlist-section').hidden = false;
        document.getElementById('playlist-title').hidden = false;


    }else if (section === 'misPlaylists' && document.getElementById('misPlaylist-section')){
        document.getElementById('misPlaylist-section').hidden = false;
        document.getElementById('misPlaylist-title').hidden = false;
    }
}

        function showPlaylist(id){
            window.location.href = `/playlist/show/${id}`;
        }
        

        function playSong(file, name, element) {
            let audio = document.getElementById('audioPlayer');
            let source = document.getElementById('audioSource');
            source.src = file;
            audio.load();
            audio.play();
            document.getElementById('player').style.display = 'flex';
            document.getElementById('playing-song').innerText = 'Reproduciendo: ' + name;

                // Quitar la clase 'playing' de todas las canciones y aplicarla solo a la seleccionada
            document.querySelectorAll('.song-card').forEach(card => card.classList.remove('playing'));
            element.classList.add('playing');
        }

        function pausePlay() {
            let audio = document.getElementById('audioPlayer');
            let playButton = document.querySelector('.play-btn');
            if (audio.paused) {
                audio.play();
                playButton.innerText = '‚è∏Ô∏è';
            } else {
                audio.pause();
                playButton.innerText = '‚ñ∂Ô∏è';
            }
        }

        function changeVolume(event) {
            let audio = document.getElementById('audioPlayer');
            audio.volume = event.target.value;
        }

        function updateProgress() {
            let audio = document.getElementById('audioPlayer');
            let progress = document.getElementById('progress');
            let percentage = (audio.currentTime / audio.duration) * 100;
            progress.style.width = percentage + '%';
        }

        function seek(event) {
            let audio = document.getElementById('audioPlayer');
            let progressBar = document.querySelector('.progress-bar');
            let clickPosition = event.offsetX / progressBar.offsetWidth;
            audio.currentTime = clickPosition * audio.duration;
        }

        function closePlayer() {
            document.getElementById('player').style.display = 'none';
            document.getElementById('audioPlayer').pause();
        }
    </script>
</body>
</html>
